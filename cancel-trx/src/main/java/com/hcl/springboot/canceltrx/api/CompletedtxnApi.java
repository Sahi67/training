/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.hcl.springboot.canceltrx.api;

import com.hcl.springboot.canceltrx.api.model.Completedtxn;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
public interface CompletedtxnApi {

    @Operation(summary = "Add a new completed txn ", description = "", tags={ "completedtxn" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/completedtxn",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addCompletedtxn(@Parameter(in = ParameterIn.DEFAULT, description = "Completed txn that needs to be added", required=true, schema=@Schema()) @Valid @RequestBody Completedtxn body);


    @Operation(summary = "Deletes a Completedtxn", description = "", tags={ "completedtxn" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Completedtxn not found") })
    @RequestMapping(value = "/completedtxn/{completedtxn}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCompletedtxn(@Parameter(in = ParameterIn.PATH, description = "Completedtxn id to delete", required=true, schema=@Schema()) @PathVariable("completedtxn") Long completedtxn);


    @Operation(summary = "Find Completedtxn by ID", description = "Returns a single Completedtxn", tags={ "completedtxn" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(schema = @Schema(implementation = Completedtxn.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Completedtxn not found") })
    @RequestMapping(value = "/completedtxn/{completedtxn}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Completedtxn> getCompletedTxnById(@Parameter(in = ParameterIn.PATH, description = "ID of Completedtxn to return", required=true, schema=@Schema()) @PathVariable("completedtxn") Long completedtxn);


    @Operation(summary = "Find completedtxn by customer ID", description = "", tags={ "completedtxn" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Completedtxn.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Customer not found") })
    @RequestMapping(value = "/completedtxn/customer/{customerid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Completedtxn>> getCompletedtxnByCustomerId(@Parameter(in = ParameterIn.PATH, description = "ID of customerid for which trx to be fetched", required=true, schema=@Schema()) @PathVariable("customerid") Long customerid);


    @Operation(summary = "Update an existing Completedtxn", description = "", tags={ "completedtxn" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Pet not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/completedtxn",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCompletedtxn(@Parameter(in = ParameterIn.DEFAULT, description = "Completed txn  that needs to be added", required=true, schema=@Schema()) @Valid @RequestBody Completedtxn body);

}

